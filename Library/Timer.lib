#include <mega32a.h>
#include <Timer.h>
#include <Tirax.h>
#include <stdlib.h>

unsigned char TimerN=0;
unsigned char TimerBitSize=0;

char *tflag;//Timer Flag Register
char *treserved; //Timer is Reserved
void(**tfunc)();// Timer Functions Addresses

unsigned int *tj;//Job Time
unsigned int *tt;//Timer Time

void StartTimer(unsigned char i,unsigned int t, void(*f)() ){
	setBitCharArr(treserved,i);
	tfunc[i]=f;
	tt[i]=t;
	tj[i]=0;//i:Timer Number,t:Timer time,f: Function
} 
void StartJob(unsigned char i,unsigned int t, void(*f)() ){
	setBitCharArr(treserved,i);
	tfunc[i]=f;
	tt[i]=t;
	tj[i]=t;
} 
void StopTimer(unsigned char i){
	resetBitCharArr(treserved,i);
	tt[i]=0;
	tj[i]=0;
}
unsigned char StartNextTimer(unsigned int t, void(*f)() ){
    unsigned char i;
    i=findFreeTimer();
    StartTimer(i,t,f);
    return i;
}
unsigned char StartNextJob(unsigned int t, void(*f)() ){
    unsigned char i;
    i=findFreeTimer();
    StartJob(i,t,f);
    return i;
}
unsigned char findFreeTimer(){
	unsigned char i;
	for(i=1;i<TimerN;i++){
		if (readBitCharArr(treserved,i)==0){
			return i;
		}
	}
}

//Run all timer functions
void RunTimer(){
    unsigned char i;
    for (i=0;i<TimerN;i++){
        if (READF(i)==1){
            tfunc[i]();
            RESETF(i);
            return;
        } 
    }
}

//Initialize ATmega32 Timer Registers
void initTimer(unsigned char size){
	size++;
	TimerN=size;
	TimerBitSize=size/8+(size%8!=0);
	tj = (unsigned int *) calloc(size,sizeof(unsigned int)); 
    tt = (unsigned int *) calloc(size,sizeof(unsigned int));
	tflag = (char *) calloc(TimerBitSize,sizeof(char));
	treserved = (char *) calloc(TimerBitSize,sizeof(char));
	tfunc = (void(**)()) calloc(size,sizeof( void(*)() ));
	
    // Timer/Counter 2 initialization
	// Clock source: System Clock
	// Clock value: 250.000 kHz
	// Mode: CTC top=OCR2A
	// OC2 output: Disconnected
	// Timer Period: 1 ms
	ASSR=0<<AS2;
	TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (1<<CTC2) | (0<<CS22) | (1<<CS21) | (1<<CS20);
	TCNT2=0x00;
	OCR2=0xF9;

    TIMSK=TIMSK | (1<<OCIE2);
}

interrupt [TIM2_COMP] void timer2_comp_isr(void)
{
	unsigned char i;
     
    for (i=0;i<TimerN;i++){
        if (tt[i]>1){
            tt[i]--;      
        }else if(tt[i]==1){
            tt[i]--;
			if (tj[i]!=0){
				tt[i]=tj[i];
			}else{
				resetBitCharArr(treserved,i);
			}
            SETF(i);
        }
    }  

}