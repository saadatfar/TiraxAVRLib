#include <Tirax.h>
#include <Timer.h>
#include <Sync.h>
#ifdef M32
#include <mega32a.h>
#endif
#ifdef M64
#include <mega64a.h>
#endif
#include <stdbool.h>

void initTirax(){
	#asm("sei");
	
	#ifdef M32
	// Watchdog Timer initialization: OSC/1024k: 1Sec
	WDTCR=(0<<WDTOE) | (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (0<<WDP0);
	#endif
	
	#ifdef M64
	// Watchdog Timer initialization
	// Watchdog Timer Prescaler: OSC/1024k
	#pragma optsize-
	/* WDTCR=(1<<WDCE) | (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (0<<WDP0);
	WDTCR=(0<<WDCE) | (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (0<<WDP0); */
	#ifdef _OPTIMIZE_SIZE_
	#pragma optsize+
	#endif
	#endif

}

void RunTirax(){
    #asm("wdr");
	RunTimer();
	RunInterrupts();
}

bool readBitCharArr(char* arr,unsigned int n){
	return (arr[n/8]&(1<<(n%8)))>>(n%8);
}
void setBitCharArr(char* arr,unsigned int n){
	arr[n/8]= arr[n/8] | (1<<(n%8));
}
void resetBitCharArr(char* arr,unsigned int n){
	arr[n/8]= arr[n/8] & (~(1<<(n%8)));
}

void raiseCriticalError(unsigned char e){
	WriteReg(RMER,e);
}
