#include <Timer.h>
#include <Sync.h>
#include <stdlib.h>
#include <mega32a.h>

unsigned char REG_SIZE; 
unsigned char REG_BIT_SIZE;

void(**intFunc)(); //Interrupt functions variable

void (*recFunc)();

unsigned char *syReg; //Registers
unsigned char *iFlag; //Interrupts

//Sync Buffer Variables
unsigned char syw_wr_index=0,syw_rd_index=0,syw_counter=0;
bit syw_overflow=0;
unsigned char syw_buffer[SYW_BUFFER_SIZE];

//TX Buffer Variables
char tx_buffer[TX_BUFFER_SIZE];
unsigned char tx_wr_index=0,tx_rd_index=0,tx_counter=0;

unsigned char syw_chk; //Last sent parity byte

//Receiver state machine variables 
unsigned char read_reg_step=0,read_i,read_d;
unsigned char read_ack_step=0;


void pushSyncBuffer(char i){
    #asm("cli")
    syw_buffer[syw_wr_index++]=i;
    if (syw_wr_index == SYW_BUFFER_SIZE) syw_wr_index=0;
    syw_counter++;
    if (syw_counter == SYW_BUFFER_SIZE) {
        syw_counter = 0;
        syw_overflow=1;    
    }
    #asm("sei")
    if (syw_counter==1){
        sendNextSy();
    }                     
}
unsigned char readSyncBuffer(){
    return syw_buffer[syw_rd_index];    
}
void pullBuffer(){
    #asm("cli")
	++syw_rd_index;
    if (syw_rd_index == SYW_BUFFER_SIZE) syw_rd_index=0;
    --syw_counter;
    #asm("sei")  
}

void putchar(char c){
    while (tx_counter == TX_BUFFER_SIZE);
    #asm("cli")
    if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
    {
       tx_buffer[tx_wr_index++]=c;
       if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
       ++tx_counter;
    }
    else
    {
       UDR=c;
    }
    #asm("sei")
}
void sendNextSy(){
    unsigned char i,data;
    if(syw_counter!=0){
        i=readSyncBuffer();
        data=syReg[i];
        syw_chk = CREATE_ACK(i,data);
        putchar(0xff);
        putchar(i);
        putchar(data);
		putchar(syw_chk);
        StartTimer(TRANS_RESEND_TIMER,RESEND_T,sendNextSy);
    }
}

void setInterrupt(char n,void(*f)()){
	intFunc[n]=f;
}

void nop(){}
// Initialize ATmega32 UART register
void initSync(unsigned char size){
    char i;
	size++;
	REG_SIZE=size;
	REG_BIT_SIZE=size/8+(size%8!=0);
	
	syReg = (unsigned char *) calloc(size,sizeof(unsigned char));
	iFlag = (unsigned char *) calloc(REG_BIT_SIZE,sizeof(unsigned char));
	intFunc = (void(**)()) calloc(REG_BIT_SIZE,sizeof(void(*)()));
	
	// USART initialization
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART Receiver: On
	// USART Transmitter: On
	// USART Mode: Asynchronous
	// USART Baud Rate: 9600
	UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
	UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
	UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
	UBRRH=0x00;
	UBRRL=0x33;
	
    for (i=0;i<REG_SIZE;i++){
        setInterrupt(i,nop);
    }
	setRecFunc(nop);	
	
}

void setReadReg(char n,char data){
	syReg[n]=data;
    putchar(ACK_START);
    putchar(CREATE_ACK(n,data));
	SETI(n);
}

void RunInterrupts(){
	char i,j,n;
	for (i=0;i<(REG_BIT_SIZE);i++){
		if (iFlag[i]!=0){
			for (j=0;j<=7;j++){
				n=i*8+j;
				if (READI(n)){
					intFunc[n]();
					RESETI(n);
					return;
				}
			}
		}
	}
}

interrupt [USART_RXC] void usart_rx_isr(void)
{
    unsigned char status,data;
    unsigned char ack;
    status=UCSRA;
    data=UDR;
    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
    {	
        if (data==READ_START){
            PORTC.4=1;
            read_reg_step=1; 
        }else if (read_reg_step==1){
            PORTC.3=1;
			read_i=data;
			read_reg_step++;
        }else if (read_reg_step==2){
            PORTC.4=0;
			read_d=data;
			read_reg_step++;
        }else if (read_reg_step==3){
            ack=CREATE_ACK(read_i,read_d);
			if (data==ack &&  read_i<REG_SIZE){
				setReadReg(read_i,read_d);
			}
			read_reg_step=0;
		}
        
        if (data==ACK_START){
            read_ack_step=1;
        }else if (read_ack_step==1){
            if (data==syw_chk){
                StopTimer(TRANS_RESEND_TIMER);
                pullBuffer();
                sendNextSy();    
            }
            read_ack_step=0;
        }
            
    }
}
interrupt [USART_TXC] void usart_tx_isr(void)
{
	recFunc();
	
   if (tx_counter)
   {
   --tx_counter;
   UDR=tx_buffer[tx_rd_index++];
   if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
   }
}

void WriteReg(unsigned char i,unsigned char data)
{
	while (syw_counter == SYW_BUFFER_SIZE);
	if(data>=0xfe)
		  data=0xfd;
	syReg[i]=data;
	pushSyncBuffer(i);
}

char ReadReg(char n){
	return syReg[n];
}

void WriteBitReg(unsigned char reg,unsigned char b, unsigned char value){
	if (value==0){
		ResetBitReg(reg,b);
	}else{
		SetBitReg(reg,b);
	}
}
void SetBitReg(unsigned char i,unsigned char n){
	syReg[i]=(1<<n) | syReg[i];
	pushSyncBuffer(i);
}
void ResetBitReg(unsigned char i,unsigned char n){
	syReg[i]=(0<<n) & syReg[i];
	pushSyncBuffer(i);
}
unsigned char ReadBitReg(unsigned char i,unsigned char n){
	return ((syReg[i] & (1<<n))!=0);
}
void setRecFunc(void (*f)()){
	recFunc=f;
}